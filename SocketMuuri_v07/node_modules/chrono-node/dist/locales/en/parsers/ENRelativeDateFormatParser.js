"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const constants_1 = require("../constants");
const dayjs_1 = __importDefault(require("dayjs"));
const AbstractParserWithWordBoundary_1 = require("../../../common/parsers/AbstractParserWithWordBoundary");
const PATTERN = new RegExp("(this|next|last|past)\\s*" +
    `(${constants_1.NUMBER_PATTERN})?\\s*` +
    "(seconds?|min(?:ute)?s?|hours?|days?|weeks?|months?|years?)(?=\\s*)" +
    "(?=\\W|$)", "i");
const MODIFIER_WORD_GROUP = 1;
const MULTIPLIER_WORD_GROUP = 2;
const RELATIVE_WORD_GROUP = 3;
class ENRelativeDateFormatParser extends AbstractParserWithWordBoundary_1.AbstractParserWithWordBoundaryChecking {
    innerPattern() {
        return PATTERN;
    }
    innerExtract(context, match) {
        if (match[MODIFIER_WORD_GROUP].toLowerCase().match(/^this/)) {
            if (match[MULTIPLIER_WORD_GROUP]) {
                return null;
            }
            return this.extractThisReference(context, match[RELATIVE_WORD_GROUP]);
        }
        const modifier = match[MODIFIER_WORD_GROUP].toLowerCase().match(/^next/) ? 1 : -1;
        const parsedNum = match[MULTIPLIER_WORD_GROUP] ? constants_1.parseNumberPattern(match[MULTIPLIER_WORD_GROUP]) : 1;
        const unitWord = match[RELATIVE_WORD_GROUP].toLowerCase();
        if (unitWord.match(/day|week|month|year/i)) {
            return this.extractDateReference(context, unitWord, parsedNum * modifier);
        }
        else {
            return this.extractTimeReference(context, unitWord, parsedNum * modifier);
        }
    }
    extractTimeReference(context, timeUnitWord, num) {
        const components = context.createParsingComponents();
        let date = dayjs_1.default(context.refDate);
        if (timeUnitWord.match(/hour/i)) {
            date = date.add(num, "hour");
            components.imply("minute", date.minute());
            components.imply("second", date.second());
        }
        else if (timeUnitWord.match(/min/i)) {
            date = date.add(num, "minute");
            components.assign("minute", date.minute());
            components.imply("second", date.second());
        }
        else if (timeUnitWord.match(/second/i)) {
            date = date.add(num, "second");
            components.assign("second", date.second());
            components.assign("minute", date.minute());
        }
        components.assign("hour", date.hour());
        components.assign("year", date.year());
        components.assign("month", date.month() + 1);
        components.assign("day", date.date());
        return components;
    }
    extractDateReference(context, dateUnitWord, num) {
        const components = context.createParsingComponents();
        let date = dayjs_1.default(context.refDate);
        if (dateUnitWord.match(/day/i)) {
            date = date.add(num, "d");
            components.assign("year", date.year());
            components.assign("month", date.month() + 1);
            components.assign("day", date.date());
        }
        else if (dateUnitWord.match(/week/i)) {
            date = date.add(num * 7, "d");
            components.imply("day", date.date());
            components.imply("month", date.month() + 1);
            components.imply("year", date.year());
        }
        else if (dateUnitWord.match(/month/i)) {
            date = date.add(num, "month");
            components.imply("day", date.date());
            components.assign("year", date.year());
            components.assign("month", date.month() + 1);
        }
        else if (dateUnitWord.match(/year/i)) {
            date = date.add(num, "year");
            components.imply("day", date.date());
            components.imply("month", date.month() + 1);
            components.assign("year", date.year());
        }
        return components;
    }
    extractThisReference(context, relativeWord) {
        const components = context.createParsingComponents();
        let date = dayjs_1.default(context.refDate);
        if (relativeWord.match(/week/i)) {
            date = date.add(-date.get("d"), "d");
            components.imply("day", date.date());
            components.imply("month", date.month() + 1);
            components.imply("year", date.year());
        }
        else if (relativeWord.match(/month/i)) {
            date = date.add(-date.date() + 1, "d");
            components.imply("day", date.date());
            components.assign("year", date.year());
            components.assign("month", date.month() + 1);
        }
        else if (relativeWord.match(/year/i)) {
            date = date.add(-date.date() + 1, "d");
            date = date.add(-date.month(), "month");
            components.imply("day", date.date());
            components.imply("month", date.month() + 1);
            components.assign("year", date.year());
        }
        return components;
    }
}
exports.default = ENRelativeDateFormatParser;
